/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
plugins {
    id 'org.sonarqube' version '2.7'
    id 'net.ltgt.apt-idea' version '0.20' apply false
    id 'org.liquibase.gradle' version '2.0.4' apply false
}

// Enabling dependency locking. See https://docs.gradle.org/current/userguide/dependency_locking.html.
allprojects {
    repositories {
        jcenter()
    }

    // Locking for configurations. See https://docs.gradle.org/current/userguide/dependency_locking.html.
    dependencyLocking {
        lockAllConfigurations()
    }

    buildscript {
        dependencyLocking {
            lockAllConfigurations()
        }
    }

    // Declare version. See https://docs.gradle.org/current/userguide/building_java_projects.html#introduction
    version = '0.0.1'

    configurations.all {
        resolutionStrategy {
            // Fail eagerly on version conflict (includes transitive dependencies)
            failOnVersionConflict()
        }
    }

    sonarqube {
        properties {
            property('sonar.organization', 'jonjam-github')
            property('sonar.projectName', 'pinboard-map')
            property('sonar.projectKey', 'pinboard-map')
            property('sonar.host.url', 'https://sonarcloud.io')
            property('sonar.junit.reportPaths', 'build/tests-results/test')
            property('sonar.coverage.jacoco.xmlReportPaths', 'build/jacoco')
        }
    }
}

def jaxbApiVersion = project.property('javax.xml.bind.jaxb-api.version')
def jacksonVersion = project.property('com.fasterxml.jackson.version')
def jerseyVersion = project.property('org.glassfish.jersey.version')
def log4jVersion = project.property('org.apache.logging.log4j.version')
def immutablesVersion = project.property('org.immutables.version')
def junitVersion = project.property('org.junit.jupiter.version')
def hamcrestVersion = project.property('org.hamcrest.version')
def mockitoVersion = project.property('org.mockito.version')
def testcontainersVersion = project.property('org.testcontainers.version')
def sl4jVersion = project.property('org.slf4j.version')
def feignVersion = project.property('io.github.openfeign.version')
def postgresVersion = project.property('org.postgresql.version')
def jnaVersion = project.property('net.java.dev.jna.version')
def jdbiVersion = project.property('org.jdbi.version')
def guiceVersion = project.property('com.google.inject.guice.version')
def liquibaseVersion = project.property('org.liquibase.version')

// Java projects
configure(subprojects.findAll { !it.name.endsWith('schema') }) {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'net.ltgt.apt-idea'
    apply plugin: 'jacoco'

    // Use dependency constraints. See https://docs.gradle.org/current/userguide/declaring_dependencies.html#declaring_a_dependency_without_version
    dependencies {
        constraints {
            // javax
            implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
            implementation 'javax.inject:javax.inject:1'

            // Jersey
            implementation "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}"
            implementation "org.glassfish.jersey.inject:jersey-hk2:${jerseyVersion}"
            // javax.xml.bind:jaxb-api and javax.activation:activation are needed to prevent errors. See https://www.jeffryhouser.com/index.cfm/2017/12/21/Why-wont-Jersey-work-on-JDK-9
            implementation "javax.xml.bind:jaxb-api:${jaxbApiVersion}"
            implementation 'javax.activation:activation:1.1+'

            // Jackson
            implementation "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"
            implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
            implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
            implementation ("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}") {
                // Resolving conflict
                force = true
            }
            // Enabling Java 8 - https://github.com/FasterXML/jackson-modules-java8
            implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"
            implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}"
            implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

            // Guice
            implementation "com.google.inject.extensions:guice-servlet:${guiceVersion}"
            implementation 'org.glassfish.hk2:guice-bridge:2.5.0'
            implementation ("com.google.inject:guice:${guiceVersion}") {
                // Resolving conflict - guice-servlet / guice-bridge
                force = true
            }

            // Logging
            implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
            implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
            // Required when running log4j in a web app. See: https://logging.apache.org/log4j/2.x/manual/webapp.html
            implementation "org.apache.logging.log4j:log4j-web:${log4jVersion}"
            // Required for async loggers: https://logging.apache.org/log4j/2.x/manual/async.html#Making_All_Loggers_Asynchronous
            implementation 'com.lmax:disruptor:3.4.2'
            // Redirecting slf4j to log4j2: https://logging.apache.org/log4j/2.x/log4j-slf4j-impl/index.html
            implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"

            implementation 'org.apache.commons:commons-lang3:3.9'

            // Immutables. See for using apt plugin to set up: https://github.com/tbroyer/gradle-apt-plugin#usage-with-ides
            annotationProcessor "org.immutables:value:${immutablesVersion}"
            compileOnly "org.immutables:value-annotations:${immutablesVersion}"

            // Config
            implementation 'com.typesafe:config:1.4.0'

            // JDBC
            implementation 'com.zaxxer:HikariCP:3.4.5'
            implementation "org.jdbi:jdbi3-core:${jdbiVersion}"
            implementation "org.jdbi:jdbi3-postgres:${jdbiVersion}"
            implementation "org.postgresql:postgresql:${postgresVersion}"
            implementation ("com.github.ben-manes.caffeine:caffeine:2.8.0") {
                // Resolving conflict with postgresql and jdbi
                force = true
            }
            implementation ("com.google.errorprone:error_prone_annotations:2.3.3") {
                // Resolving conflict with guice-bridge and jdbi
                force = true
            }
            implementation ("net.java.dev.jna:jna-platform:${jnaVersion}") {
                // Resolving conflict with postgresql and testcontainers
                force = true
            }
            implementation ("net.java.dev.jna:jna:${jnaVersion}") {
                // Resolving conflict with postgresql and testcontainers
                force = true
            }

            // JUnit. See for setup: https://docs.gradle.org/current/userguide/java_testing.html#using_junit5
            testImplementation ("org.junit.jupiter:junit-jupiter-api:${junitVersion}") {
                // Resolving conflict - this / testcontainers
                force = true
            }
            testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

            // Hamcrest
            testImplementation "org.hamcrest:hamcrest-library:${hamcrestVersion}"
            testImplementation ("org.hamcrest:hamcrest-core:${hamcrestVersion}") {
                // Only specified to resolve conflict - hamcrest-library / testcontainers
                force = true
            }

            // Mockito
            testImplementation "org.mockito:mockito-core:${mockitoVersion}"
            testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"

            // TestContainers
            implementation "org.testcontainers:testcontainers:${testcontainersVersion}"
            implementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
            implementation "org.testcontainers:postgresql:${testcontainersVersion}"
            implementation ("org.slf4j:slf4j-api:${sl4jVersion}") {
                // Only specified to resolve conflict between testcontainers libs.
                force = true
            }

            // Feign
            testImplementation "io.github.openfeign:feign-core:${feignVersion}"
            testImplementation "io.github.openfeign:feign-jackson:${feignVersion}"
            testImplementation "io.github.openfeign:feign-jaxrs:${feignVersion}"
            testImplementation "io.github.openfeign:feign-slf4j:${feignVersion}"

            // Liquibase
            implementation ("org.liquibase:liquibase-core:${liquibaseVersion}")
        }
    }
    
    // Set compatibility. See https://docs.gradle.org/current/userguide/building_java_projects.html#introduction
    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    // Performance suggestions for Java projects. See https://guides.gradle.org/performance/#suggestions_for_java_projects
    tasks.withType(JavaCompile) {
        options.fork = true
    }

    tasks.withType(Test) {
        // JUnit - setup. See https://docs.gradle.org/current/userguide/java_testing.html#using_junit5
        useJUnitPlatform()

        // JUnit - parralel execution. See https://junit.org/junit5/docs/current/user-guide/#writing-tests-parallel-execution
        systemProperty('junit.jupiter.execution.parallel.enabled', 'true')
        systemProperty('junit.jupiter.execution.parallel.mode.default', 'concurrent')

        // Performance suggestions for Java projects. See https://guides.gradle.org/performance/#suggestions_for_java_projects
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        setForkEvery(100)
        reports.html.enabled = false
        reports.junitXml.enabled = true
    }
}

// API projects
configure(subprojects.findAll { it.name.endsWith('api') }) {
    dependencies {
        // Immutables
        annotationProcessor 'org.immutables:value'
        compileOnly 'org.immutables:value-annotations'

        // Project dependencies
        // Used as annotation processor for Immutables custom annotation.
        annotationProcessor project(':common:common-objectmodel')
        implementation project(':common:common-objectmodel')
    }
}

// Service implementation projects
configure(subprojects.findAll { it.name.endsWith('svc') }) {
    apply plugin: 'war'

    dependencies {
        // Immutables
        annotationProcessor 'org.immutables:value'
        compileOnly 'org.immutables:value-annotations'

        // Project dependencies
        implementation project(':common:common-configuration')
        implementation project(':common:common-logging')
        // Used as annotation processor for Immutables custom annotation.
        annotationProcessor project(':common:common-objectmodel')
        implementation project(':common:common-objectmodel')
        implementation project(':common:common-service')
        testImplementation project(':common:common-test')
    }

    tasks {
        task explodedWar(type: Copy) {
            group = 'Custom'
            description = 'Copies contents of a WAR into a directory'

            dependsOn('war')

            from(zipTree("$buildDir/libs/${project.name}-${project.version}.war"))
            into("$buildDir/exploded")
        }

        assemble {
            dependsOn('explodedWar')
        }
    }
}

// Schema projects
configure(subprojects.findAll { it.name.endsWith('schema') }) {
    apply plugin: 'org.liquibase.gradle'
    // Require java plugin to be applied in order to be able to reference schema projects from svc projects.
    apply plugin: 'java'

    // Use dependency constraints. See https://docs.gradle.org/current/userguide/declaring_dependencies.html#declaring_a_dependency_without_version
    dependencies {
        constraints {
            // Liquibase and Postgres
            liquibaseRuntime ("org.liquibase:liquibase-core:${liquibaseVersion}")
            liquibaseRuntime "org.postgresql:postgresql:${postgresVersion}"
            liquibaseRuntime ("org.slf4j:slf4j-api:${sl4jVersion}") {
                // Only specified to resolve conflicts when added.
                force = true
            }
        }

        liquibaseRuntime 'org.liquibase:liquibase-core'
        liquibaseRuntime 'javax.xml.bind:jaxb-api'
        liquibaseRuntime 'org.postgresql:postgresql'
    }

    liquibase {
        activities {
            main {
                changeLogFile 'src/main/resources/changelog.xml'
                url project.findProperty('schema_db_url')
                username project.findProperty('schema_db_username')
                password project.findProperty('schema_db_password')
            }
        }
    }
}