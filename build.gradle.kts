/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

plugins {
    id("org.sonarqube") version "2.7"
}

// Enabling dependency locking. See https://docs.gradle.org/current/userguide/dependency_locking.html.
allprojects {
    repositories {
        jcenter()
    }

    // Locking for configurations. See https://docs.gradle.org/current/userguide/dependency_locking.html.
    dependencyLocking {
        lockAllConfigurations()
    }

    buildscript {
        dependencyLocking {
            lockAllConfigurations()
        }
    }

    // Declare version. See https://docs.gradle.org/current/userguide/building_java_projects.html#introduction
    version = "0.0.1"
}

subprojects {
    // TODO Refactor below as and when to only be common stuff.
    apply(plugin = "java")
    apply(plugin = "checkstyle")

    // Use dependency constraints. See https://docs.gradle.org/current/userguide/declaring_dependencies.html#declaring_a_dependency_without_version
    dependencies {
        constraints {
            "implementation"("org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.+")
            "implementation"("org.glassfish.jersey.inject:jersey-hk2:2.+")
            "implementation"("org.glassfish.jersey.media:jersey-media-json-jackson:2.+")
            // TODO Renable Guice
            // "implementation"("org.glassfish.hk2:guice-bridge:2.+")
            "testImplementation"("org.junit.jupiter:junit-jupiter-api:5.+")
            "testImplementation"("org.junit.jupiter:junit-jupiter-params:5.+")
            "testRuntimeOnly"("org.junit.jupiter:junit-jupiter-engine:5.+")
        }
    }

    // Set compatibility. See https://docs.gradle.org/current/userguide/building_java_projects.html#introduction
    configure<JavaPluginConvention> {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    // Performance suggestions for Java projects. See https://guides.gradle.org/performance/#suggestions_for_java_projects
    tasks.withType<JavaCompile> {
        options.isFork = true
    }

    tasks.withType<Test> {
        maxParallelForks = (Runtime.getRuntime().availableProcessors() / 2).takeIf { it > 0 } ?: 1

        setForkEvery(100)

        reports.html.isEnabled = false
        reports.junitXml.isEnabled = false
    }
}